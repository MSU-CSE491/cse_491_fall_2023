/**
 * This file is part of the Fall 2023, CSE 491 course project.
 * @brief A master GameData object, to store all game data.
 * @note Status: ALPHA
 **/

#pragma once

#include <vector>

#include "../core/GridPosition.hpp"

namespace DataCollection {

class GameData {
private:
  /* number of collisions */
  int numOfCol;

  std::vector<int> collisions;                        ///< A vector of Collision Data
  std::vector<size_t> shortestPathAction;             ///< A vector of the shortest path action
  std::vector<cse491::GridPosition> shortestPathPos;  ///< A vector of the shortest Position
public:
  /**
   * @brief Default constructor for AgentData class.
   */
  GameData() = default;

  /**
   * @brief Destructor for AgentData class.
   */
  ~GameData() = default;

  /**
   * @brief Get the number of collisions.
   * @return Number of collisions.
   */
  int getNumOfCol() const { return numOfCol; }
  ///<--------------These member functions are generated by Chatgpt
  /**
   * @brief Set the number of collisions.
   * @param value The value to set.
   */
  void setNumOfCol(int value) { numOfCol = value; }

  /**
   * @brief Store collision data.
   * @param collision Collision data to store.
   */
  void StoreCollision(int collision) { collisions.push_back(collision); }

  /**
   * @brief Retrieve the stored collisions data.
   * @return A constant reference to the vector of collisions.
   */
  const std::vector<int>& GetCollisions() const { return collisions; }

  /**
   * @brief Store a shortest path action.
   * @param action Shortest path action to store.
   */
  void StoreShortestPathAction(size_t action) { shortestPathAction.push_back(action); }

  /**
   * @brief Retrieve the stored shortest path actions.
   * @return A constant reference to the vector of shortest path actions.
   */
  const std::vector<size_t>& GetShortestPathActions() const { return shortestPathAction; }

  /**
   * @brief Store a shortest path position.
   * @param position Shortest path position to store.
   */
  void StoreShortestPathPos(const cse491::GridPosition pos) { shortestPathPos.push_back(pos); }

  /**
   * @brief Retrieve the stored shortest path positions.
   * @return A constant reference to the vector of shortest path positions.
   */
  const std::vector<cse491::GridPosition> GetShortestPathPos() const { return shortestPathPos; }
};
}  // namespace DataCollection
