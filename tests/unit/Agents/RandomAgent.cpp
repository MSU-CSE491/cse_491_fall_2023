/**
 * @file RandomAgent.cpp
 * @author Yousif Murrani
 */

// Catch2
#define CATCH_CONFIG_MAIN
#include <catch2/catch_all.hpp>

// class project
#include "Agents/RandomAgent.hpp"
#include "Worlds/MazeWorld.hpp"

using namespace walle;

TEST_CASE("Random Agent Initialization", "[Agents]")
{
  // create random agent
  RandomAgent agent(1, "TestAgent");

  SECTION("Initialization Failure")
  {
    // no actions so false
    REQUIRE(agent.Initialize() == false);
  }

  agent.AddAction("up", 1);
  agent.AddAction("down", 2);
  agent.AddAction("left", 3);
  agent.AddAction("right", 4);

  SECTION("Initialization Success")
  {
    // has actions so agent is initialized
    REQUIRE(agent.Initialize() == true);
  }
}

/**
 * The tests below were generated by ChatGPT and then
 * re-done in a better styles
 */

TEST_CASE("Random Variable", "[Agents]")
{
  RandomAgent agent(1, "TestAgent");

  agent.AddAction("up", 1);
  agent.AddAction("down", 2);
  agent.AddAction("left", 3);
  agent.AddAction("right", 4);

  // has actions so agent is initialized
  REQUIRE(agent.Initialize() == true);

  SECTION("Initial Random")
  {
    // initial random variable
    REQUIRE(agent.GetRandom() == 4.0);
  }

  SECTION("Set Random")
  {
    // check setting random value
    agent.SetDirection(1);
    REQUIRE(agent.GetRandom() == 1.0);
  }
}

TEST_CASE("Random Agent Moving", "[Agents]")
{
  RandomAgent agent(1, "TestAgent");

  agent.AddAction("up", 1);
  agent.AddAction("down", 2);
  agent.AddAction("left", 3);
  agent.AddAction("right", 4);

  // has actions so agent is initialized
  REQUIRE(agent.Initialize() == true);

  SECTION("Initial Moving") { REQUIRE(agent.GetMoving() == true); }

  // set moving and check that it worked
  agent.SetMoving(false);

  SECTION("Set Moving") { REQUIRE(agent.GetMoving() == false); }
}

TEST_CASE("Agent State")
{
  // initialize agent and world
  RandomAgent agent(1, "TestAgent");
  cse491::MazeWorld world;
  agent.SetWorld(world);
  agent.SetPosition(cse491::GridPosition(0, 0));

  // give agent properties
  agent.SetProperty("Health", 10);
  agent.SetProperty("Taking_Damage", false);
  agent.SetProperty("Max_Health", 15);

  // agent is healthy
  agent.UpdateAgentState(agent);
  SECTION("Healthy State") { REQUIRE(agent.GetAgentState() == cse491::Healthy); }

  // agent is taking damage
  agent.SetProperty("Taking_Damage", true);
  agent.UpdateAgentState(agent);
  SECTION("Taking Damage State") { REQUIRE(agent.GetAgentState() == cse491::Taking_Damage); }

  // agent is dying
  agent.SetProperty("Taking_Damage", false);
  agent.SetProperty("Health", 3);
  agent.UpdateAgentState(agent);
  SECTION("Dying State") { REQUIRE(agent.GetAgentState() == cse491::Dying); }

  // agent is dead
  agent.SetProperty("Health", 0);
  agent.UpdateAgentState(agent);
  SECTION("Deceased State") { REQUIRE(agent.GetAgentState() == cse491::Deceased); }
}